################################# Expression Noise vs Expression Level #################################
########################################################################################################
# Combined code 7, 8
# Data: VOEN_DF


# *P<0.05, **P<0.01, ***P<0.001, NS - nonsignificant

# Labels for BP test
BP_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("BP = 20.352***","BP = 0.30119","BP = 8.3797**","BP = 2.569","BP = 0.18577","BP = 0.052547","BP = 0.45345","BP = 1.8556"))

# Labels for Pearson coefficient tests (Pearson)
# R_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.25***", " = 0.068*", " = 0.28***", " = 0.1**", " = 0.056", " = 0.04 *", " = 0.19***", " = 0.055"))

# Labels for Pearson coefficient tests (Spearman)
R_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.253***", " = 0.087*", " = 0.321***", " = 0.128**", " = 0.053", " = 0.034", " = 0.203***", " = 0.045"))


# Labels to add italics to "r", concatentate Pearson tests 
rR_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("ρ","ρ","ρ","ρ","ρ","ρ","ρ","ρ"))

#--------------------------------------------------------------------------------------------------
# plot_comb_7_8_[1]log10_expression_level_log10_expression_noise__[2]facet_wrap_conditions
# Data set: VOEN_DF_Cond; Attribute for Sort: Level_Noise_Cond
# Overall plot	
plot1<-ggplot(data = VOEN_DF_Cond, mapping = aes(x = log10(expression_level), y = log10(expression_noise)), na.rm = TRUE) +
	geom_point(color = 'black') +
	
	# x and y axis labels
	xlab(expression(~log[10]~"(expression level)")) + 
	ylab(expression(~log[10]~"(expression noise)")) +

	# Print out Pearson and BP statistics
	annotate("text", x=1.03,  y=-3.25, cex=4.0, label= "ρ", hjust = 0, fontface="italic") +
  	
	# Pearson
	#annotate("text", x=1.035,  y=-3.25, cex=4.0, label= " = 0.15**",hjust = 0) +

	# Spearman
  	annotate("text", x=1.037,  y=-3.25, cex=4.0, label= " = 0.16**",hjust = 0) +


  	annotate("text", x=1.03,  y=-3.4, cex=4.0, label= "BP = 78**",hjust = 0) +

	# Establish plot limits
	ylim(-3.5,0.5) +
	xlim(.75,1.08) +

	# Set overall plot them to black and white
	theme_bw() +

	# Plot reference
	labs(tag = "A")		


# Faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments

plot2<-ggplot(data = VOEN_DF_Cond,mapping = aes(x = log10(expression_level), y = log10(expression_noise)), na.rm = TRUE) +
	geom_point(color = 'black') +

	# x and y axis labels
	xlab(expression(~log[10]~"(expression level)")) + 
	ylab(expression(~log[10]~"(expression noise)")) +

	# Print out Pearson and BP statistics
  	geom_text(x = .87, y = -3.25, cex=2.5, aes(label = label), data =  rR_ELevel_labels,hjust = 0, fontface="italic") +
  	geom_text(x = .89, y = -3.25, cex=2.5, aes(label = label), data =  R_ELevel_labels,hjust = 0) +
  	geom_text(x = .87, y = -3.4, cex=2.5, aes(label = label), data = BP_ELevel_labels,hjust = 0) +

	# Establish plot limits
	ylim(-3.5,0.5) +
	xlim(.75,1.08) +

	# Create ordered facets with labels
	# new_labels array provides labels to match ordering of facets
	facet_wrap(~ Level_Noise_Cond, nrow = 2,labeller = labeller(Level_Noise_Cond=c(new_labels ))) +

	# Set overall default theme
	theme_bw() +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +

	# Plot label
	labs(tag = "B")	

	# Function to fill facet strip labels
	plot2 <- modify_strip_colors(plot2)

# Include plots in a single grid
grid.arrange(plot1, plot2, ncol=2)


########################################### Regulatory Inputs ##########################################
########################################################################################################
# Combined code 9, 10
# Data: VOEN_DF

# *P<0.05, **P<0.01, ***P<0.001, NS - nonsignificant

# A data frame with labels for each facet
## Expression_Level
# Labels for BP test
BP_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("BP = 4.7842*","BP = 4.5205*","BP = 8.7634**","BP = 3.0454","BP = 4.2762*","BP = 8.675**","BP = 10.041**","BP = 0.28143"))

# Labels for Pearson coefficient tests
# R_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.08*", " = 0.076*", " = 0.11***", " = 0.085*"," = 0.093**"," = 0.11***"," = 0.12***"," = 0.27"))

# Labels to add italics to "r", concatentate Pearson tests 
# rR_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("r","r","r","r","r","r","r","r"))


# Labels for Pearson coefficient tests (Spearman)
R_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.077*", " = 0.060", " = 0.074*", " = 0.065"," = 0.062"," = 0.077*"," = 0.098**"," = 0.010"))


# Labels to add italics to "r", concatentate Pearson tests  (Spearman)
rR_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("ρ","ρ","ρ","ρ","ρ","ρ","ρ","ρ"))


# Labels for Pearson coefficient tests (Spearman)
#R_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.253***", " = 0.087*", " = 0.321***", " = 0.128**", " = 0.053", " = 0.034", " = 0.203***", " = 0.045"))


# Labels to add italics to "r", concatentate Pearson tests 
#R_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("ρ","ρ","ρ","ρ","ρ","ρ","ρ","ρ"))

## Expression_Noise
# Labels for BP test
BP_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("BP = 14.066***","BP = 13.291***","BP = 4.2006*","BP = 4.9649*","BP = 0.018299","BP = 6.5949*","BP = 7.6647**","BP = 11.855***"))

# Labels for Pearson coefficient tests
# R_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.16***"," = 0.14***"," = 0.11***"," = 0.11**"," = 0.16***"," = 0.19***"," = 0.22***"," = 0.27***"))

# Labels to add italics to "r", concatentate Pearson tests 
# rR_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("r","r","r","r","r","r","r","r"))

# Labels for Pearson coefficient tests (Spearman)
#R_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.16***"," = 0.14***"," = 0.11***"," = 0.11**"," = 0.16***"," = 0.19***"," = 0.22***"," = 0.27***"))


# Labels for Pearson coefficient tests (Spearman)	
#R_ENoise_RInput_labels <- data.frame(condition = c("ciprofloxacin", "glucose", "glycerol","lactose","NaCl","stationary phase 16h","stationary phase 30h","synthetic rich"), label = c(" = 0.121***"," = .078*"," = 0.101**"," = 0.089**"," = 0.130***"," = 0.216***"," = 0.252***"," = 0.259"))

R_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.121***"," = .078*"," = 0.101**"," = 0.089**"," = 0.130***"," = 0.216***"," = 0.252***"," = 0.259***"))


# Labels to add italics to "r", concatentate Pearson tests  (Spearman)
rR_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("ρ","ρ","ρ","ρ","ρ","ρ","ρ","ρ"))


# Labels for Pearson coefficient tests (Spearman)
#R_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.253***", " = 0.087*", " = 0.321***", " = 0.128**", " = 0.053", " = 0.034", " = 0.203***", " = 0.045"))


# Labels to add italics to "r", concatentate Pearson tests 
#rR_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("ρ","ρ","ρ","ρ","ρ","ρ","ρ","ρ"))


# Labels to print out " >10" at bottom of chart
bottom_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c(" >10",""," >10"," >10"," >10","","",""))
#--------------------------------------------------------------------------------------------------
# plot_comb_9_10_[1]log10_expression_level_reg_inputs__[2]log10_expression_noise__reg_inputsf_wrap_cond

# Create a temporary data frame 
VOEN_DF_TEMP <- VOEN_DF_Cond
# Data set: VOEN_DF_Cond; Attribute for Sort: Level_Noise_Cond

# Move all points > 10 to position 11 and note below with labels
VOEN_DF_TEMP$reg_inputs[VOEN_DF_TEMP$reg_inputs > 10] <- 11

# Overall plot, expression level
plot1<-ggplot(data = VOEN_DF_TEMP,mapping = aes(x = reg_inputs, y = log10(expression_level)), na.rm = TRUE) +
	geom_point(color = 'black') +

	# x and y axis labels
	xlab(expression(~"regulatory inputs")) + 
	ylab(expression(~log[10]~"(expression level)")) +

	# Print out Pearson and BP statistics
	annotate("text", x=9,  y=1.09, cex=3.0, label= "ρ",hjust = 0, fontface="italic") +
	annotate("text", x=9.2,  y=1.09, cex=3.0, label= " = 0.09 ***",hjust = 0) +
	annotate("text", x=9,  y=1.07, cex=3.0, label= "BP = 40.6***",hjust = 0) +

	# Print out note that the points have been moved and are "> 10"
	annotate("text", x = 11, y = 0.72, label = "> 10",size = 3) +   
	# Necessary to print below axes
	coord_cartesian(ylim = c(0.75, 1.1), clip = "off") +

	# Establish plot limits
	#ylim(-4.5,0.5) +
	xlim(0,11) +

	# Set overall plot them to black and white
	theme_bw() +

	# Plot reference
	labs(tag = "A")	


# Overall plot, expression noise
plot2<-ggplot(data = VOEN_DF_TEMP,mapping = aes(x = reg_inputs, y = log10(expression_noise)), na.rm = TRUE) +
	geom_point(color = 'black') +

	# x and y axis labels
	xlab(expression(~"regulatory inputs")) + 
	ylab(expression(log[10]~"(expression noise)")) +

	# Print out Pearson and BP statistics
	annotate("text", x=9,  y=0.48, cex=3.0, label= "ρ",hjust = 0, fontface="italic") +
	annotate("text", x=9.2,  y=0.48, cex=3.0, label= " = 0.139 ***",hjust = 0) +
	annotate("text", x=9,  y=0.225, cex=3.0, label= "BP = 49.104***",hjust = 0) +

	# Print out note that the points have been moved and are "> 10"
	annotate("text", x = 11, y = -4.5, label = "> 10",size = 3) +   
	coord_cartesian(ylim = c( -4.1,0.5), clip = "off") +

	# Establish plot limits
	#ylim(-4.0,0.5) +
	xlim(0,11) +

	# Set overall plot them to black and white
	theme_bw() +

	# Plot reference
	labs(tag = "B")	


# Expression level, faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments
plot3<-ggplot(data = VOEN_DF_TEMP,mapping = aes(x = reg_inputs, y = log10(expression_level)), na.rm = TRUE) +
	geom_point(color = 'black') +

	# x and y axis labels
	xlab(expression(~"regulatory inputs")) + 
	ylab(expression(~log[10]~"(expression level)")) +

	# Print out Pearson and BP statistics
	geom_text(x = 5.7, y = 1.09, cex=2.0, aes(label = label), data = rR_ELevel_RInput_labels,hjust = 0, fontface="italic") +
	geom_text(x = 6.1, y = 1.09, cex=2.0, aes(label = label), data = R_ELevel_RInput_labels,hjust = 0, fontface="plain") +
	geom_text(x = 5.9, y = 1.06, cex=2.0, aes(label = label), data = BP_ELevel_RInput_labels,hjust = 0, fontface="plain") +

	# Establish plot limits
	#ylim(-4.5,0.5) +
	xlim(0,11) +

	# Print out "> 10" label at the bottom of the faceted plots.  Note that bottom_labels vector only has values for bottom layer
	geom_text(size=3,x = 9.6, y = 0.7, cex=2.0, aes(label = label), data = bottom_labels, hjust = 0) +

	# Necessary to print below axes  
	coord_cartesian(ylim = c(0.75, 1.1), clip = "off") +

	# Create ordered facets with labels
	# new_labels array provides labels to match ordering of facets
	facet_wrap(~ Level_Noise_Cond, nrow = 2,labeller = labeller(Level_Noise_Cond=c(new_labels ))) +

	# Set overall default theme
	theme_bw() +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +


	# Plat label
	labs(tag = "C")	

	# Function to fill facet strip labels
	plot3 <- modify_strip_colors(plot3)

# Expression noise, faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments
plot4<-ggplot(data = VOEN_DF_TEMP,mapping = aes(x = reg_inputs, y = log10(expression_noise)), na.rm = TRUE) +
	geom_point(color = 'black') +

	# x and y axis labels
	xlab(expression(~"regulatory inputs")) + 
	ylab(expression(~log[10]~"(expression noise)")) +

	# Set plot limits
	xlim(0,11) +
	ylim( -4.0,1.0) +

	# Print out Pearson and BP statistics
	geom_text(x = 5.6, y = 0.8, cex=2.0, aes(label = label), data = rR_ELevel_RInput_labels,hjust = 0, fontface="italic") +
	geom_text(x = 6.05, y = 0.8, cex=2.0, aes(label = label), data = R_ENoise_RInput_labels,hjust = 0, fontface="plain") +
	geom_text(x = 5.6, y = 0.4, cex=2.0, aes(label = label), data = BP_ENoise_RInput_labels,hjust = 0, fontface="plain") +

	# Print out "> 10" label at the bottom of the faceted plots.  Note that bottom_labels vector only has values for bottom layer
	geom_text(size=3,x = 9.6, y = -5.38, cex=2.0, aes(label = label), data = bottom_labels,hjust = 0) +

	# Necessary to print below axes  
	coord_cartesian(ylim = c( -4.60,1.0), clip = "off") +

	# Create ordered facets with labels
	# new_labels array provides labels to match ordering of facets
	facet_wrap(~ Level_Noise_Cond, nrow = 2,labeller = labeller( Level_Noise_Cond=c(new_labels ))) +

	# Set overall default theme
	theme_bw() +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +


	# Plot label
	labs(tag = "D")	

	# Function to fill facet strip labels
	plot4 <- modify_strip_colors(plot4)


# Include plots in a single grid
grid.arrange(plot1, plot2, plot3, plot4, ncol=2)


############################################## Essentiality ############################################
########################################################################################################

# plot_comb_19_20_[1]expression_level_Essential__[2]expression_noise_Essentialf_wrap_cond

# Combined code 29, 30
# Data: Essential_All_DF_Extended_NA_to_Zero
# Data set: Essential_All_DF_Extended_NA_to_Zero; Attribute for Sort: Essential_Level_Cond

# Variables to persist boxplot fill colors
level_Color =adjustcolor( "darkorchid1", alpha.f = 0.3)
noise_color = adjustcolor( "snow3", alpha.f = 0.3)

# Overall plot, expression level
plot1<-ggplot(data = Essential_All_DF_Extended_NA_to_Zero,mapping = aes(x =  Essential, y = log10(expression_level),  fill = Essential, na.rm=FALSE, show.legend = FALSE))+
	geom_boxplot(notch=TRUE,  aes(group=Essential),outlier.shape = NA)+

	# x and y axis labels
	scale_x_discrete(labels = c("N","E"), breaks = c("FALSE","TRUE")) + labs(x = NULL) +
	scale_fill_manual(values=c(level_Color, noise_color)) +
	ylab(expression(~log[10]~"(expression level)")) +

	# Establish plot limits
	ylim(0.7, 1.15) +

	# Print brackets between the boxplots
	geom_bracket(data = Essential_All_DF_Extended_NA_to_Zero,xmin = "FALSE", xmax ="TRUE", y.position = 1.07, 
		label = "***", tip.length = 0.01, color = "black") +

	# Set overall plot them to black and white
	theme_bw() +

	# Remove legends
	theme(legend.position = "none") +

	# Plot reference
	labs(tag = "A")	


# Overall plot, expression noise
plot2<-ggplot(data = Essential_All_DF_Extended_NA_to_Zero,mapping = aes(x =  Essential, y = log10(expression_noise),  fill = Essential, na.rm=FALSE))+
	geom_boxplot(notch=TRUE,  aes(group=Essential),outlier.shape = NA) +

	# x and y axis labels
	scale_x_discrete(labels = c("N","E"), breaks = c("FALSE","TRUE")) + labs(x = NULL) +
	scale_fill_manual(values=c(level_Color, noise_color)) +
	ylab(expression(~log[10]~"(expression noise)")) +

	# Establish plot limits
	ylim(-2.5, 0) +

	# Print brackets between the boxplots
	geom_bracket(data = Essential_All_DF_Extended_NA_to_Zero,xmin = "FALSE", xmax ="TRUE", y.position = -.15, 
		label ="***", tip.length = 0.001, color = "black") +

	# Set overall plot them to black and white
	theme_bw()+ 

	# Remove legends
	theme(legend.position = "none") +

	# Plot reference
	labs(tag = "B")	


# Expression level, faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments
plot3<-ggplot(data = Essential_All_DF_Extended_NA_to_Zero,mapping = aes(x =  Essential, y = log10(expression_level),  fill = Essential, na.rm=FALSE))+
	geom_boxplot(notch=TRUE,  aes(group=Essential),outlier.shape = NA)+

	# x and y axis labels
	scale_x_discrete(labels = c("N","E"), breaks = c("FALSE","TRUE")) + labs(x = NULL) +
	scale_fill_manual(values=c(level_Color, noise_color)) +
	ylab(expression(~log[10]~"(expression level)")) +

	# Establish plot limits
	ylim(0.7, 1.15) +

	# Print brackets between the boxplots
	geom_bracket(data = Essential_All_DF_Extended_NA_to_Zero,xmin = "FALSE", xmax ="TRUE", y.position = 1.07, 
		label = Essential_All_DF_Extended_NA_to_Zero$Essential_Level_Sig, tip.length = 0.01, color = "black",label.size = 3) +

	# Create ordered facets with labels
	# new_labels array provides labels to match ordering of facets
	facet_wrap(~ Essential_Level_Cond, nrow = 2,labeller = labeller( Essential_Level_Cond=c(new_labels ))) +

	# Set overall default theme
	theme_bw() +

	# Remove legends
	theme(legend.position = "none") +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +

	# Plot label
	labs(tag = "C")

	# Function to fill facet strip labels	
	plot3 <- modify_strip_colors(plot3)


# Expression noise, faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments
plot4<-ggplot(data = Essential_All_DF_Extended_NA_to_Zero,mapping = aes(x =  Essential, y = log10(expression_noise),  fill = Essential, na.rm=FALSE))+
	geom_boxplot(notch=TRUE,  aes(group=Essential),outlier.shape = NA, show.legend = FALSE) +

	# x and y axis labels
	scale_x_discrete(labels = c("N","E"), breaks = c("FALSE","TRUE")) + labs(x = NULL) +
	scale_fill_manual(values=c(level_Color, noise_color)) +
	ylab(expression(~log[10]~"(expression noise)")) +

	# Establish plot limits
	ylim(-2.5, 0.5) +

	# Print brackets between the boxplots
	geom_bracket(data = Essential_All_DF_Extended_NA_to_Zero,xmin = "FALSE", xmax ="TRUE", y.position = 0.1, 
		label =Essential_All_DF_Extended_NA_to_Zero$Essential_Noise_Sig, tip.length = 0.001, color = "black",label.size = 3) +

	# Create ordered facets with labels
	# new_labels array provides labels to match ordering of facets
	facet_wrap(~ Essential_Level_Cond, nrow = 2,labeller = labeller( Essential_Level_Cond=c(new_labels  ))) +

	# Set overall default theme
	theme_bw()+ 

	# Remove legends
	theme(legend.position = "none") +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +
                         
	# Plot label
	labs(tag = "D")	

	# Function to fill facet strip labels
	plot4 <- modify_strip_colors(plot4)

# Include plots in a single grid
grid.arrange(plot1, plot2, plot3, plot4,ncol=2)

