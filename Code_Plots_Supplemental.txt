
# S1
############################################## Essentiality ############################################
########################################################################################################

# plot_Boxplot_comb_19_20_[1]reg_inputs_[2]Essential

# Combined code 29, 30
# Data: Essential_All_DF_Extended_NA_to_Zero
# Data set: Essential_All_DF_Extended_NA_to_Zero; Attribute for Sort: Essential_Level_Cond


# Map Essential values to TRUE or FALSE
Essential_All_DF_Extended_NA_to_Zero <- Essential_All_DF_Extended
Essential_All_DF_Extended_NA_to_Zero$Essential <- ifelse(is.na(Essential_All_DF_Extended_NA_to_Zero$Essential) , FALSE, TRUE)

Essential_All_DF_Extended_NA_to_Zero <- filter(Essential_All_DF_Extended_NA_to_Zero, reg_inputs != 0)

Essential_All_DF_Extended_NA_to_Zero_eTRUE  <- filter(Essential_All_DF_Extended_NA_to_Zero, Essential == TRUE)
Essential_All_DF_Extended_NA_to_Zero_eFALSE  <- filter(Essential_All_DF_Extended_NA_to_Zero, Essential == FALSE)


# Variables to persist boxplot fill colors
level_Color =adjustcolor( "darkorchid1", alpha.f = 0.3)
noise_color = adjustcolor( "snow3", alpha.f = 0.3)


# Overall plot, expression level
#plot1<-ggplot(data = Essential_All_DF_Extended_NA_to_Zero, aes( x =  Essential, y = reg_inputs,  fill = Essential, na.rm=FALSE))+ 
#plot1<-ggplot(data = Essential_All_DF_Extended_NA_to_Zero, aes( x =  Essential, y = reg_inputs,  fill = Essential))+ 
plot1<-ggplot(data = Essential_All_DF_Extended_NA_to_Zero, aes( x =  Essential, y = log10(reg_inputs+1),  fill = Essential))+ 
#ggplot(data = Essential_All_DF_Extended_NA_to_Zero, aes( x =  Essential, y = reg_inputs,  fill = Essential))+ 


	geom_boxplot(notch=TRUE,  aes(group=Essential),outlier.shape = NA) +
	#geom_boxplot(notch=TRUE,  aes(group=Essential)) +



# ggtitle("Regulatory inputs") +

	# x and y axis labels
	scale_x_discrete(labels = c("Nonessential","Essential"), breaks = c("FALSE","TRUE")) + 

	#labs(x = NULL) +
	scale_fill_manual(values=c(level_Color, noise_color)) +

	#ylab(expression(~log[10]~"(expression noise)")) +

	#scale_x_discrete(labels = c("ciprofloxacin", "glucose", "glycerol", "lactose", "NaCl", "stationary phase 16h", "stationary phase 30h",  "synthetic rich"), breaks = 	#c("ciprofloxacin", "glucose", "glycerol", "lactose", "NaCl", "stationary phase 16h", "stationary phase 30h", "synthetic rich")) + 

	labs(x = NULL) +

	#scale_fill_manual(values=c(level_Color, noise_color,level_Color, noise_color,level_Color, noise_color,level_Color, noise_color)) +
	#scale_fill_manual(values=c(noise_color, noise_color, noise_color, noise_color, noise_color,noise_color, noise_color, noise_color)) +
	#ylab(expression(~log[10]~"(expression level)")) +
	ylab(~log[10]~"(number of regulatory inputs)") +

	# Establish plot limits
	#ylim(0.7, 1.15) +
	#ylim(-1, 2) +


	# Print brackets between the boxplots
	geom_bracket(data = Essential_All_DF_Extended_NA_to_Zero,xmin = "FALSE", xmax ="TRUE", y.position = 1.07, label = "***", tip.length = 0.01, color = "black") +

	# Set overall plot them to black and white
	theme_bw() +

	# Remove legends
	theme(legend.position = "none") +

	theme(axis.text=element_text(size=14), axis.title=element_text(size=16,face="bold")) 

	#theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5,size=18)) +
	#theme(axis.text.y = element_text(size=18)) 

	# Plot reference
	#labs(tag = "A")	

# Include plots in a single grid
grid.arrange(plot1,ncol=1)




# S2
################################# Expression Noise vs Expression Level #################################
########################################################################################################
# Combined code 7, 8
# Data: VOEN_DF


# *P<0.05, **P<0.01, ***P<0.001, NS - nonsignificant

# Labels for BP test
BP_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("BP = 20.352***","BP = 0.30119","BP = 8.3797**","BP = 2.569","BP = 0.18577","BP = 0.052547","BP = 0.45345","BP = 1.8556"))

# Labels for SW test
SW_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("SW = 0.94845***","SW = 0.93537***","SW = 0.95982***","SW = 0.95052***","SW = 0.94896***","SW = 0.95294***","SW = 0.95511***","SW = 0.90455***"))


# Labels for Pearson coefficient tests
R_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c(" = 0.25***", " = 0.068*", " = 0.28***", " = 0.1**", " = 0.056", " = 0.04 *", " = 0.19***", " = 0.055"))

# Labels to add italics to "r", concatentate Pearson tests 
rR_ELevel_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), label = c("r","r","r","r","r","r","r","r"))

#--------------------------------------------------------------------------------------------------
# plot_histogram_comb_7_8_[1]expression_level_Residuals_[2]facet_wrap_conditions
# Data set: VOEN_DF_Cond; Attribute for Sort: Level_Noise_Cond
# Overall plot	


#--------------------------------------------------------------------------------------------------
# Prepare residuals
# Copy data frame to incorporate residuals
VOEN_DF_Cond_Res <- VOEN_DF_Cond

# Create model for residuals
model <- lm( log10(expression_noise) ~ log10(expression_level), data = VOEN_DF_Cond_Res)

# Add residuals
VOEN_DF_Cond_Res<-add_residuals (VOEN_DF_Cond_Res, model)

# Residuals calculated as function of log, therefore rescale for comparison to other variables
VOEN_DF_Cond_Res$resid_exp <- 10^(VOEN_DF_Cond_Res$resid)
#VOEN_DF_Cond_Res$resid_exp <- exp(VOEN_DF_Cond_Res$resid)


#model <- lm( log10(expression_noise) ~ reg_inputs, data = VOEN_DF_Cond)
#VOEN_DF_Cond<-add_residuals (VOEN_DF_Cond,model)
#VOEN_DF_Cond_Temp$resid_exp <- exp(VOEN_DF_Cond_Temp$resid)

#--------------------------------------------------------------------------------------------------

#plot1<-ggplot(data = VOEN_DF_Cond_Res, mapping = aes(x = expression_level, y = resid_exp), na.rm = TRUE) +
#plot1<-ggplot(data = VOEN_DF_Cond_Res, mapping = aes(x = log10(expression_level), y = resid), na.rm = TRUE) +
plot1<-ggplot(data = VOEN_DF_Cond_Res, mapping = aes(y= resid), na.rm = TRUE) +
#	geom_point(color = 'black') +

	geom_histogram(color="gray30",fill="gray70",binwidth=0.1)  +
	coord_flip(xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +

	# REMOVED in 2.7.2024 version
	#geom_smooth(method = lm, se = FALSE, color = 'red')  +

	#geom_hline(yintercept=0,  color = "red", size=1) +

	# x and y axis labels
	#xlab(expression(~"expression level")) + 
	#xlab(expression(~log[10]~"(expression level)")) + 
	xlab("frequency") + 

	#residuals(log10(expression noise) ~ log10(expression level))


	ylab(~"residuals("~log[10]~"(expression noise)"~" ~ "~log[10]~"(expression level))") +
	#ylab(expression(~"Residuals - Expression Noise v Expression Level")) +

	# Print out Pearson and BP statistics
	# REMOVED in 2.7.2024 version
	#annotate("text", x=1.03,  y=-3.25, cex=4.0, label= "r",hjust = 0, fontface="italic") +
  	#annotate("text", x=1.035,  y=-3.25, cex=4.0, label= " = 0.15**",hjust = 0) +
  	#annotate("text", x=1,  y= 1.5, cex=4.0, label= "BP = 78**",hjust = 0) +
  	annotate("text", x=600,  y= -2.5, cex=4.0, label= "SW = 0.97499***",hjust = 0) +

	# Establish plot limits
	ylim(-2.5,2.0) +
	#xlim(.75,1.08) +

	# Set overall plot them to black and white
	theme_bw() +

	# Plot reference
	labs(tag = "A")		


# Faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments
#plot2<-ggplot(data = VOEN_DF_Cond_Res,mapping = aes(x = expression_level, y = resid_exp), na.rm = TRUE) +
#plot2<-ggplot(data = VOEN_DF_Cond_Res,mapping = aes(x = log10(expression_level), y = resid), na.rm = TRUE) +
plot2<-ggplot(data = VOEN_DF_Cond_Res,mapping = aes(y = resid), na.rm = TRUE) +
#	geom_point(color = 'black') +


	geom_histogram(color="gray30",fill="gray70",binwidth=0.1)  +

	coord_flip(xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
	# REMOVED in 2.7.2024 version
	#geom_smooth(method = lm, se = FALSE, color = 'red')  +

	#geom_hline(yintercept=0,  color = "red", size=1) +

	# x and y axis labels
	#xlab(expression(~"expression level")) + 
	#xlab(expression(~log[10]~"(expression level)")) + 
	xlab("frequency") + 

	#ylab(expression(~"Residuals - Expression Noise v Expression Level")) +
	#ylab(~"residuals - " ~log[10]~"(expression noise)" ~" v "~log[10]~"(expression level)") +
	ylab(~"residuals("~log[10]~"(expression noise)"~" ~ "~log[10]~"(expression level))") +

	#residuals(log10(expression noise) ~ log10(expression level))

	# Print out Pearson and BP statistics
	# REMOVED in 2.7.2024 version
  	#geom_text(x = .87, y = -3.25, cex=2.5, aes(label = label), data =  rR_ELevel_labels,hjust = 0, fontface="italic") +
  	#geom_text(x = .88, y = -3.25, cex=2.5, aes(label = label), data =  R_ELevel_labels,hjust = 0) +
  	#geom_text(x = 0.85, y = 1.7, cex=2.5, aes(label = label), data = BP_ELevel_labels,hjust = 0) +
  	#geom_text(x = 100, y = -2.5, cex=2.5, aes(label = label), data = BP_ELevel_labels,hjust = 0) +
  	geom_text(x = 130, y = -2.5, cex=2.5, aes(label = label), data = SW_ELevel_labels,hjust = 0) +

	# Establish plot limits
	ylim(-2.5,2.0) +
	#xlim(.75,1.08) +

	# Create ordered facets with labels
	  # new_labels array provides labels to match ordering of facets
	facet_wrap(~ Level_Noise_Cond, nrow = 2,labeller = labeller(Level_Noise_Cond=c(new_labels ))) +

	# Set overall default theme
	theme_bw() +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +

	# Plot label
	labs(tag = "B")	

	# Function to fill facet strip labels
	plot2 <- modify_strip_colors(plot2)

# Include plots in a single grid
grid.arrange(plot1, plot2, ncol=2)


# S3
########################################### Regulatory Inputs ##########################################
########################################################################################################
# Combined code 9, 10
# Data: VOEN_DF

# *P<0.05, **P<0.01, ***P<0.001, NS - nonsignificant

# A data frame with labels for each facet
## Expression_Level
# Labels for BP test
BP_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("BP = 4.7842*","BP = 4.5205*","BP = 8.7634**","BP = 3.0454","BP = 4.2762*","BP = 8.675**","BP = 10.041**","BP = 0.28143"))

SW_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("SW = 0.94845***","SW = 0.93537***","SW = 0.95982***","SW = 0.95052***","SW = 0.94896***","SW = 0.95294***","SW = 0.95511***","SW = 0.90455***"))


# Labels for Pearson coefficient tests
R_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c(" = 0.08*", " = 0.076*", " = 0.11***", " = 0.085*"," = 0.093**"," = 0.11***"," = 0.12***"," = 0.27"))

# Labels to add italics to "r", concatentate Pearson tests 
rR_ELevel_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("r","r","r","r","r","r","r","r"))

## Expression_Noise
# Labels for BP test
BP_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("BP = 14.066***","BP = 13.291***","BP = 4.2006*","BP = 4.9649*","BP = 0.018299","BP = 6.5949*","BP = 7.6647**","BP = 11.855***"))

SW_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("SW = 0.92551***","SW = 0.88487***","SW = 0.92673***","SW = 0.95884***","SW = 0.95193***","SW = 0.9682***","SW = 0.9737***","SW = 0.94897***"))


# Labels for Pearson coefficient tests
R_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c(" = 0.16***"," = 0.14***"," = 0.11***"," = 0.11**"," = 0.16***"," = 0.19***"," = 0.22***"," = 0.27***"))

# Labels to add italics to "r", concatentate Pearson tests 
rR_ENoise_RInput_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c("r","r","r","r","r","r","r","r"))

# Labels to print out " >10" at bottom of chart
bottom_labels <- data.frame(Level_Noise_Cond = c("h", "d", "e","f","g","b","c","a"), 
	label = c(" >10",""," >10"," >10"," >10","","",""))
#--------------------------------------------------------------------------------------------------
# plot_histogram_comb_9_10_[1]residuals_EL_reg_inputs__[2]residuals_EN__reg_inputsf_wrap_cond

# Create a temporary data frame 
VOEN_DF_TEMP <- VOEN_DF_Cond
# Data set: VOEN_DF_Cond; Attribute for Sort: Level_Noise_Cond

# Move all points > 10 to position 11 and note below with labels
VOEN_DF_TEMP$reg_inputs[VOEN_DF_TEMP$reg_inputs > 10] <- 11


#--------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------
# Prepare residuals for Expression Level and reg_inputs
# Copy data frame to incorporate residuals
VOEN_DF_TEMP_Res_EL <- VOEN_DF_TEMP

# Create model for residuals
model_EL <- lm(expression_level~ reg_inputs, data = VOEN_DF_TEMP_Res_EL)
#model_EL <- lm(log10(expression_level)~ reg_inputs, data = VOEN_DF_TEMP_Res_EL)

# Add residuals
VOEN_DF_TEMP_Res_EL<-add_residuals (VOEN_DF_TEMP_Res_EL, model_EL)

# Residuals calculated as function of log, therefore rescale for comparison to other variables
VOEN_DF_TEMP_Res_EL$resid_exp <- exp(VOEN_DF_TEMP_Res_EL$resid)
#--------------------------------------------------------------------------------------------------
# Prepare residuals for Expression Noise and reg_inputs
# Copy data frame to incorporate residuals
VOEN_DF_TEMP_Res_EN <- VOEN_DF_TEMP

# Create model for residuals
model_EN <- lm(expression_noise~ reg_inputs, data = VOEN_DF_TEMP_Res_EN)
#model_EN <- lm(log10(expression_noise) ~ reg_inputs, data = VOEN_DF_TEMP_Res_EN)

# Add residuals
VOEN_DF_TEMP_Res_EN<-add_residuals (VOEN_DF_TEMP_Res_EN, model_EN)

# Residuals calculated as function of log, therefore rescale for comparison to other variables
VOEN_DF_TEMP_Res_EN$resid_exp <- exp(VOEN_DF_TEMP_Res_EN$resid)
#--------------------------------------------------------------------------------------------------

# Overall plot, expression level
#plot1<-ggplot(data = VOEN_DF_TEMP_Res_EL,mapping = aes(x = reg_inputs, y = resid_exp), na.rm = TRUE) +
#plot1<-ggplot(data = VOEN_DF_TEMP_Res_EL,mapping = aes(x = reg_inputs, y = resid), na.rm = TRUE) +
plot1<-ggplot(data = VOEN_DF_TEMP_Res_EL,mapping = aes(y = resid), na.rm = TRUE) +
	#geom_point(color = 'black') +

	geom_histogram(color="gray30",fill="gray70",binwidth=0.1)  +

	coord_flip(xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +

	# REMOVED in 2.7.2024 version
	#geom_smooth(method = lm, se = FALSE, color = 'red')  +

	#geom_hline(yintercept=0,  color = "red", size=1) +

	# x and y axis labels
	#xlab(expression(~"regulatory inputs")) + 
	xlab(expression(~"frequency")) + 

	#ylab(expression(~log[10]~"(expression level)")) +
	#ylab(expression(~"residuals (prediction errors) - expression level")) +
	#ylab(expression(~"Residuals - expression level")) +
	#ylab(~"residuals - " ~log[10]~"(expression level)" ~" v "~"regulatory inputs") +
	ylab(~"residuals("~log[10]~"(expression level)"~" ~ "~"regulatory inputs)") +

	#residuals(log10(expression noise) ~ log10(expression level))


	# Print out Pearson and BP statistics
	# REMOVED in 2.7.2024 version
	#annotate("text", x=9,  y=1.09, cex=3.0, label= "r",hjust = 0, fontface="italic") +
	#annotate("text", x=9.08,  y=1.09, cex=3.0, label= " = 0.09 ***",hjust = 0) +
	#annotate("text", x=9,  y=4, cex=3.0, label= "BP = 40.6***",hjust = 0) +
	annotate("text", x=300,  y=2, cex=3.0, label= "SW = 0.95832***",hjust = 0) +

	# Print out note that the points have been moved and are "> 10"
	#annotate("text", x = 11, y = 0.72, label = "> 10",size = 3) +   
	#annotate("text", x = 11, y = -2.6, label = "> 10",size = 3) +   

	# Necessary to print below axes
	#coord_cartesian(ylim = c(0.75, 1.1), clip = "off") +
	#coord_cartesian(ylim = c(-2, 5), clip = "off") +

	# Establish plot limits
	#ylim(-4.5,0.5) +
	#ylim(-2,5) +
	#xlim(0,11) +

	# Set overall plot them to black and white
	theme_bw() +

	# Plot reference
	labs(tag = "A")	



# Overall plot, expression noise
#plot2<-ggplot(data = VOEN_DF_TEMP,mapping = aes(x = reg_inputs, y = log10(expression_noise)), na.rm = TRUE) +
#plot2<-ggplot(data = VOEN_DF_TEMP_Res_EN,mapping = aes(x = reg_inputs, y = resid), na.rm = TRUE) +
plot2<-ggplot(data = VOEN_DF_TEMP_Res_EN,mapping = aes(y = resid), na.rm = TRUE) +
#	geom_point(color = 'black') +
	# REMOVED in 2.7.2024 version
	#geom_smooth(method = lm, se = FALSE, color = 'red')  +

	geom_histogram(color="gray30",fill="gray70",binwidth=0.01)  +

	coord_flip(xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +

	#geom_hline(yintercept=0,  color = "red", size=1) +


	# x and y axis labels
	#xlab(expression(~"regulatory inputs")) + 
	xlab(expression(~"frequency")) + 

	#ylab(expression(log[10]~"(expression noise)")) +
	#ylab(expression(~"residuals (prediction errors) - expression noise")) +
	#ylab(~"residuals - " ~log[10]~"(expression noise)" ~" v "~"regulatory inputs") +
	ylab(~"residuals("~log[10]~"(expression noise)"~" ~ "~"regulatory inputs)") +
	#residuals(log10(expression noise) ~ log10(expression level))



	# Print out Pearson and BP statistics
	# REMOVED in 2.7.2024 version
	#annotate("text", x=9,  y=0.49, cex=3.0, label= "r",hjust = 0, fontface="italic") +
	#annotate("text", x=9.08,  y=0.49, cex=3.0, label= " = 0.16 ***",hjust = 0) +
	#annotate("text", x=8,  y=1.25, cex=3.0, label= "BP = 49.104***",hjust = 0) +
	annotate("text", x=500,  y=.5, cex=3.0, label= "SW = 0.96829***",hjust = 0) +

	# Print out note that the points have been moved and are "> 10"
	#annotate("text", x = 11, y = -4.5, label = "> 10",size = 3) +   
	#annotate("text", x = 11, y = -.45, label = "> 10",size = 3) +   

	#coord_cartesian(ylim = c( -4.1,0.5), clip = "off") +
	#coord_cartesian(ylim = c(-0.3, 1.5), clip = "off") +

	# Establish plot limits
	#ylim(-4.0,0.5) +
	#xlim(0,11) +

	# Set overall plot them to black and white
	theme_bw() +

	# Plot reference
	labs(tag = "B")	


# Expression level, faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments
#plot3<-ggplot(data = VOEN_DF_TEMP,mapping = aes(x = reg_inputs, y = log10(expression_level)), na.rm = TRUE) +
#plot3<-ggplot(data = VOEN_DF_TEMP_Res_EL,mapping = aes(x = reg_inputs, y = resid), na.rm = TRUE) +
plot3<-ggplot(data = VOEN_DF_TEMP_Res_EL,mapping = aes(y = resid), na.rm = TRUE) +
	#geom_point(color = 'black') +
	# REMOVED in 2.7.2024 version
	#geom_smooth(method = lm, se = FALSE, color = 'red')  +

	geom_histogram(color="gray30",fill="gray70",binwidth=0.01)  +

	coord_flip(xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +


	#geom_hline(yintercept=0,  color = "red", size=1) +

	# x and y axis labels
	#xlab(expression(~"regulatory inputs")) + 
	xlab(expression(~"frequency")) + 

	#ylab(expression(~log[10]~"(expression level)")) +
	#ylab(expression(~"residuals (prediction errors) - expression level")) +
	#ylab(~"residuals - " ~log[10]~"(expression level)" ~" v "~"regulatory inputs") +
	ylab(~"residuals("~log[10]~"(expression level)"~" ~ "~"regulatory inputs)") +
	#residuals(log10(expression noise) ~ log10(expression level))

	# Print out Pearson and BP statistics
	# REMOVED in 2.7.2024 version
	#geom_text(x = 5.7, y = 1.09, cex=2.0, aes(label = label), data = rR_ELevel_RInput_labels,hjust = 0, fontface="italic") +
	#geom_text(x = 5.9, y = 1.09, cex=2.0, aes(label = label), data = R_ELevel_RInput_labels,hjust = 0, fontface="plain") +
	#geom_text(x = 5.5, y = 4, cex=2.0, aes(label = label), data = BP_ELevel_RInput_labels,hjust = 0, fontface="plain") +
	#geom_text(x = 9, y = 1, cex=2.0, aes(label = label), data = BP_ELevel_RInput_labels,hjust = 0, fontface="plain") +
	geom_text(x = 11, y = 0.2, cex=2.0, aes(label = label), data = SW_ELevel_RInput_labels,hjust = 0, fontface="plain") +

	# Establish plot limits
	#ylim(-4.5,0.5) +
	xlim(0,11) +

	# Print out "> 10" label at the bottom of the faceted plots.  Note that bottom_labels vector only has values for bottom layer
	#geom_text(size=3,x = 9.6, y = 0.7, cex=2.0, aes(label = label), data = bottom_labels, hjust = 0) +
	#geom_text(size=3,x = 9.6, y =  -3.0, cex=2.0, aes(label = label), data = bottom_labels, hjust = 0) +
	#annotate("text", x = 11, y = -2.6, label = "> 10",size = 3) +   

	# Necessary to print below axes  
	#coord_cartesian(ylim = c(0.75, 1.1), clip = "off") +
	#coord_cartesian(ylim = c(-2, 5), clip = "off") +


	# Create ordered facets with labels
	  # new_labels array provides labels to match ordering of facets
	facet_wrap(~ Level_Noise_Cond, nrow = 2,labeller = labeller(Level_Noise_Cond=c(new_labels ))) +

	# Set overall default theme
	theme_bw() +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +


	# Plat label
	labs(tag = "C")	

	# Function to fill facet strip labels
	plot3 <- modify_strip_colors(plot3)

# Expression noise, faceted plots by conditions, facets were created on an attribute to order facet conditions by 
  # three non-competitive (synthetic rich, stationary phase 16h, stationary phase 30h)
  # three competitive (glucose, glycerol, lactose), and 
  # two stress (osmotic - NaCl, antibiotic - ciprofloxacin) environments
#plot4<-ggplot(data = VOEN_DF_TEMP,mapping = aes(x = reg_inputs, y = log10(expression_noise)), na.rm = TRUE) +
#plot4<-ggplot(data = VOEN_DF_TEMP_Res_EN,mapping = aes(x = reg_inputs, y = resid), na.rm = TRUE) +
plot4<-ggplot(data = VOEN_DF_TEMP_Res_EN,mapping = aes(y = resid), na.rm = TRUE) +
	#geom_point(color = 'black') +
	# REMOVED in 2.7.2024 version
	#geom_smooth(method = lm, se = FALSE, color = 'red')  +

	geom_histogram(color="gray30",fill="gray70",binwidth=0.01)  +

	coord_flip(xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +


	#geom_hline(yintercept=0,  color = "red", size=1) +

	# x and y axis labels
	xlab(expression(~"frequency")) + 
	#xlab(expression(~"regulatory inputs")) + 

	#ylab(expression(~log[10]~"(expression noise)")) +
	#ylab(expression(~"residuals (prediction errors) - expression noise")) +
	#ylab(~"residuals - " ~log[10]~"(expression noise)" ~" v "~"regulatory inputs") +
	ylab(~"residuals("~log[10]~"(expression noise)"~" ~ "~"regulatory inputs)") +
	#residuals(log10(expression noise) ~ log10(expression level))

	# Set plot limits
	#xlim(0,11) +
	#ylim( -4.0,1.0) +

	# Print out Pearson and BP statistics
	# REMOVED in 2.7.2024 version
	#geom_text(x = 5.6, y = 0.8, cex=2.0, aes(label = label), data = rR_ELevel_RInput_labels,hjust = 0, fontface="italic") +
	#geom_text(x = 5.8, y = 0.8, cex=2.0, aes(label = label), data = R_ENoise_RInput_labels,hjust = 0, fontface="plain") +
	#geom_text(x = 4.6, y = 0.9, cex=2.0, aes(label = label), data = BP_ENoise_RInput_labels,hjust = 0, fontface="plain") +
	#geom_text(x = 100, y = 0.5, cex=2.0, aes(label = label), data = BP_ENoise_RInput_labels,hjust = 0, fontface="plain") +
	geom_text(x = 150, y = 0.2, cex=2.0, aes(label = label), data = SW_ENoise_RInput_labels,hjust = 0, fontface="plain") +

	# Print out "> 10" label at the bottom of the faceted plots.  Note that bottom_labels vector only has values for bottom layer
	#geom_text(size=3,x = 9.6, y = -5.25, cex=2.0, aes(label = label), data = bottom_labels,hjust = 0) +
	#geom_text(size=3,x = 9.6, y = -0.37, cex=2.0, aes(label = label), data = bottom_labels,hjust = 0) +

	#annotate("text", x = 11, y = -.45, label = "> 10",size = 3) +   
	# Necessary to print below axes  
	#coord_cartesian(ylim = c( -4.5,1.0), clip = "off") +
	#coord_cartesian(ylim = c(-0.2, 1.0), clip = "off") +

	# Create ordered facets with labels
	  # new_labels array provides labels to match ordering of facets
	facet_wrap(~ Level_Noise_Cond, nrow = 2,labeller = labeller( Level_Noise_Cond=c(new_labels ))) +

	# Set overall default theme
	theme_bw() +

	# This theme for the facet strip labels must follow bw so that they are not removed from bw
	theme(strip.text = element_text(face = "bold",size = 8.0), strip.background = element_rect(fill = NA, color = "black")) +


	# Plot label
	labs(tag = "D")	

	# Function to fill facet strip labels
	plot4 <- modify_strip_colors(plot4)


# Include plots in a single grid
grid.arrange(plot1, plot2, plot3, plot4, ncol=2)
#grid.arrange(plot1, plot3, ncol=2)
#grid.arrange(plot2, plot4, ncol=2)

